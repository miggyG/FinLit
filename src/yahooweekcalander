from datetime import datetime
from urllib.request import urlopen, Request
from bs4 import BeautifulSoup as Bs
import numpy as np
import yfinance as yf

dt = datetime.now().date()
# lists
calltimes = []
companies = []
tickers = []
dayslist = []
prices = []

# Static
YEAR = dt.strftime("%Y")
FMONTH = int(dt.strftime("%m"))
FSTART = int(dt.strftime("%d")) - int(dt.strftime("%w"))
FEND = int(dt.strftime("%d")) + (6 - int(dt.strftime("%w")))
TODAY = int(dt.strftime("%d"))


# check if the day is over the end of the month and if it is change the end to the right day
def timecalc(months, ends):
    if months == "01" or months == "03" or months == "05" or months == "07" or months == "08" or months == "10" or months == "12":
        endday = 31
    elif months == "02":
        endday = 28
    else:
        endday = 30
    if ends > endday:
        diff = ends - endday
        return diff
    else:
        return ends


# check if end is
def addzero(x):
    if x < 10:
        return "0" + str(x)
    else:
        return str(x)


def maincal(rtype):
    # days is the amount of days it has extracted
    days = 0
    while days < 7:
        # set changing variables as the static ones before they are messed with
        day = TODAY + days
        start = FSTART
        end = FEND
        month = FMONTH
        month2 = FMONTH
        # change to next week's page after the first week
        if days >= 7:
            start = start + 7
            end = end + 7
        # end will return the same if it is not over the months last day so if it changes the month and day is fixed
        if timecalc(FMONTH, end) != end:
            end = timecalc(FMONTH, end)
            month2 = FMONTH + 1
        # makes everything into string type and adds a 0 in front of numbers under 10 as the url requires
        day = addzero(day)
        start = addzero(start)
        end = addzero(end)
        month = addzero(month)
        month2 = addzero(month2)
        # adds to the day list for later charts
        dayslist.append(YEAR + "/" + month + "/" + day)
        # this loads the websites parses and the html for reading
        urlvar = f"from={YEAR}-{month}-{start}&to={YEAR}-{month2}-{end}&day={YEAR}-{month}-{day}"
        url = "https://finance.yahoo.com/calendar/earnings?" + urlvar
        req = Request(url=url, headers={'user-agent': 'my-app'})
        response = urlopen(req)
        html = Bs(response, features='html.parser')
        caltable = html.find(id='cal-res-table')
        # if there is nothing for that day it throws an error, so I used try/except so that if nothing is that day it
        # will say so and not stop the program.
        try:
            # finds all tr rows first one doesnt have anything all rest have tickers

            tickerrows = caltable.findAll('tr')

            # finds all companies
            companyrows = caltable.find_all('td', attrs={'colspan': '',
                                                         'class': ['Va(m)', 'Ta(start)', 'Pend(10px)', 'Pstart(6px)',
                                                                   'Fz(s)'],
                                                         'aria-label': 'Company'})
            # finds call times
            calltimerows = caltable.find_all('td', attrs={'colspan': '',
                                                          'class': ['Va(m)', 'Ta(end)', 'Pstart(15px)', 'W(20%)',
                                                                    'Fz(s)'],
                                                          'aria-label': 'Earnings Call Time'})
            # adds everything to respective lists
            for index, row in enumerate(calltimerows):
                calltime = row.text
                calltimes.append(day + "-" + calltime)
            for index, row in enumerate(companyrows):
                company = row.text
                companies.append(company)
            for index, row in enumerate(tickerrows):
                # needs to be in try because first row has nothing but rest has the tickers
                try:
                    ticker = row.a.text
                    tickers.append(ticker)
                except AttributeError:
                    pass
        except AttributeError:
            pass
        days = days + 1

    for ticker in tickers:
        tick = yf.Ticker(ticker)
        pinfo = tick.info
        price = pinfo["previousClose"]
        cap = pinfo["marketCap"]
        if price < 3.0 or cap < 25000000:
            i = tickers.index(ticker)
            del tickers[i]
            del companies[i]
            del calltimes[i]
        else:
            prices.append(str(yf.ticker))

    # everythingarray = np.array([tickers, companies, calltimes, prices])

    if rtype == 1:
        return tickers
    elif rtype == 2:
        return companies
    elif rtype == 3:
        return calltimes
    else:
        return tickers
