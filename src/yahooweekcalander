import random
import threading
import time
from datetime import datetime
from urllib.request import urlopen, Request

import yfinance as yf
from bs4 import BeautifulSoup as Bs
from fake_useragent import UserAgent

# variables
dt = datetime.now().date()
errors = 0
# lists
calltimes = []
companies = []
tickers = []
dayslist = []
prices = []
threads = []
tickerthread = []

user_agent_list = (
    # Chrome
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36',
    'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36',
    'Mozilla/5.0 (Windows NT 5.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36',
    'Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36',
    'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36',
    'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36',
    'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36',
    # Firefox
    'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)',
    'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko',
    'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)',
    'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko',
    'Mozilla/5.0 (Windows NT 6.2; WOW64; Trident/7.0; rv:11.0) like Gecko',
    'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',
    'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0)',
    'Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; rv:11.0) like Gecko',
    'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)',
    'Mozilla/5.0 (Windows NT 6.1; Win64; x64; Trident/7.0; rv:11.0) like Gecko',
    'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)',
    'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)',
    'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)'
)

# Static
YEAR = dt.strftime("%Y")
FMONTH = int(dt.strftime("%m"))
FSTART = int(dt.strftime("%d")) - int(dt.strftime("%w"))
FEND = int(dt.strftime("%d")) + (6 - int(dt.strftime("%w")))
TODAY = int(dt.strftime("%d"))
TIME_INTERVAL = 5

ua = UserAgent()  # From here we generate a random user agent


# check if the day is over the end of the month and if it is change the end to the right day
def timecalc(months, ends):
    if months == "01" or months == "03" or months == "05" or months == "07" or months == "08" or months == "10" or months == "12":
        endday = 31
    elif months == "02":
        endday = 28
    else:
        endday = 30
    if ends > endday:
        diff = ends - endday
        return diff
    else:
        return ends


# check if end is
def addzero(x):
    if x < 10:
        return "0" + str(x)
    else:
        return str(x)


def eachday(days):
    numofretries = 10
    # set changing variables as the static ones before they are messed with
    day = TODAY + days
    start = FSTART
    end = FEND
    month = FMONTH
    month2 = FMONTH
    # change to next week's page after the first week
    if days >= 7:
        start = start + 7
        end = end + 7
    # end will return the same if it is not over the months last day so if it changes the month and day is fixed
    if timecalc(FMONTH, end) != end:
        end = timecalc(FMONTH, end)
        month2 = FMONTH + 1
    # makes everything into string type and adds a 0 in front of numbers under 10 as the url requires
    day = addzero(day)
    start = addzero(start)
    end = addzero(end)
    month = addzero(month)
    month2 = addzero(month2)
    # adds to the day list for later charts
    dayslist.append(YEAR + "/" + month + "/" + day)
    # loads up url
    urlvar = f"from={YEAR}-{month}-{start}&to={YEAR}-{month2}-{end}&day={YEAR}-{month}-{day}"
    url = "https://finance.yahoo.com/calendar/earnings?" + urlvar

    user_agent = random.choice(user_agent_list)
    headers = {'User-Agent': user_agent}
    req = Request(url=url, headers=headers)

    response = urlopen(req)
    html = Bs(response, features='html.parser')
    caltable = html.find(id='cal-res-table')
    # if there is nothing for that day it throws an error, so I used try/except so that if nothing is that day it
    # will say so and not stop the program.
    try:
        # finds all tr rows first one doesnt have anything all rest have tickers

        tickerrows = caltable.findAll('tr')

        # finds all companies
        companyrows = caltable.find_all('td', attrs={'colspan': '',
                                                     'class': ['Va(m)', 'Ta(start)', 'Pend(10px)', 'Pstart(6px)',
                                                               'Fz(s)'],
                                                     'aria-label': 'Company'})
        # finds call times
        calltimerows = caltable.find_all('td', attrs={'colspan': '',
                                                      'class': ['Va(m)', 'Ta(end)', 'Pstart(15px)', 'W(20%)',
                                                                'Fz(s)'],
                                                      'aria-label': 'Earnings Call Time'})
        # adds everything to respective lists
        for index, row in enumerate(calltimerows):
            calltime = row.text
            calltimes.append(day + "-" + calltime)
        for index, row in enumerate(companyrows):
            company = row.text
            companies.append(company)
        for index, row in enumerate(tickerrows):
            # needs to be in try because first row has nothing but rest has the tickers
            try:
                ticker = row.a.text
                tickers.append(ticker)
            except AttributeError:
                pass
    except AttributeError:
        pass
    print(f"Thread {days + 1} done.")


def filtering(ticker, tickindex, listlength):
    tick = yf.Ticker(ticker)
    pinfo = tick.info
    price = pinfo["previousClose"]
    cap = pinfo["marketCap"]
    print(f"Filtering ticker {tickindex}/{listlength}")
    try:
        if price < 3.0 or cap < 25000000:
            i = tickers.index(ticker)
            del tickers[i]
            del companies[i]
            del calltimes[i]
        else:
            prices.append(str(yf.ticker))
    except TypeError:
        i = tickers.index(ticker)
        del tickers[i]
        del companies[i]
        del calltimes[i]


def maincal(rtype):
    for i in range(7):
        t = threading.Thread(target=eachday, args=[i], name=str(i + 1))
        t.start()
        threads.append(t)
        print(f"Starting calander thread {i + 1}")

    for thread in threads:
        thread.join()

    time.sleep(0.1)
    print("Filtering calander data")
    for ticker in tickers:
        t = threading.Thread(target=filtering, args=[ticker, tickers.index(ticker), len(tickers)], name=ticker)
        t.start()
        tickerthread.append(t)

    for thread in tickerthread:
        thread.join()

    print("Done filtering.")

    # everythingarray = np.array([tickers, companies, calltimes, prices])

    if rtype == 1:
        return tickers
    elif rtype == 2:
        return companies
    elif rtype == 3:
        return calltimes
    else:
        return tickers
        
        
